"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropagateTags = exports.SchedulingStrategy = exports.EcsService = void 0;
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_ecs_1 = require("aws-cdk-lib/aws-ecs");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const constructs_1 = require("constructs");
class EcsService extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const { cluster, subnetIds, serviceName, launchType = aws_ecs_1.LaunchType.FARGATE, desiredCount = 1, prodTargetGroup, testTargetGroup, taskDefinition, healthCheckGracePeriod = aws_cdk_lib_1.Duration.seconds(60), } = props;
        this.tags = new aws_cdk_lib_1.TagManager(aws_cdk_lib_1.TagType.KEY_VALUE, 'TagManager');
        const containerPort = props.containerPort ?? taskDefinition.containerPort;
        const { vpc } = cluster;
        this.node.addDependency(prodTargetGroup, testTargetGroup);
        const securityGroups = props.securityGroups || [
            new aws_ec2_1.SecurityGroup(this, 'SecurityGroup', {
                description: `Security group for ${this.node.id} service`,
                vpc,
            }),
        ];
        const serviceToken = new aws_lambda_1.Function(this, `${id}-BGService`, {
            runtime: aws_lambda_1.Runtime.NODEJS_14_X,
            code: aws_lambda_1.Code.fromAsset(path.join(__dirname, 'lambdas', 'ecs-service')),
            handler: 'index.handler',
            timeout: aws_cdk_lib_1.Duration.minutes(15),
        });
        serviceToken.addToRolePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ['ecs:CreateService', 'ecs:UpdateService', 'ecs:DeleteService', 'ecs:DescribeServices', 'ecs:TagResource', 'ecs:UntagResource'],
            resources: ['*'],
        }));
        serviceToken.addToRolePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ['iam:PassRole'],
            resources: [taskDefinition.executionRole.roleArn],
        }));
        const platformVersion = launchType === aws_ecs_1.LaunchType.FARGATE ? '1.4.0' : undefined;
        const service = new aws_cdk_lib_1.CustomResource(this, `${id}-ECSCR`, {
            serviceToken: serviceToken.functionArn,
            resourceType: 'Custom::BlueGreenService',
            properties: {
                Cluster: cluster.clusterName,
                ServiceName: serviceName,
                ContainerName: taskDefinition.containerName,
                TaskDefinition: taskDefinition.taskDefinitionArn,
                LaunchType: launchType,
                PlatformVersion: platformVersion,
                DesiredCount: desiredCount,
                Subnets: subnetIds ?? vpc.isolatedSubnets.map((sn) => sn.subnetId),
                SecurityGroups: securityGroups.map((sg) => sg.securityGroupId),
                TargetGroupArn: prodTargetGroup.targetGroupArn,
                ContainerPort: containerPort,
                SchedulingStrategy: SchedulingStrategy.REPLICA,
                HealthCheckGracePeriodSeconds: healthCheckGracePeriod.toSeconds(),
                PropagateTags: props.propagateTags,
                DeploymentConfiguration: {
                    maximumPercent: props.maxHealthyPercent ?? 200,
                    minimumHealthyPercent: props.minHealthyPercent ?? 50,
                    deploymentCircuitBreaker: props.circuitBreaker
                        ? {
                            enable: true,
                            rollback: props.circuitBreaker.rollback ?? false,
                        }
                        : undefined,
                },
                Tags: aws_cdk_lib_1.Lazy.any({ produce: () => this.tags.renderTags() }),
            },
        });
        service.node.addDependency(prodTargetGroup.loadBalancerAttached);
        this.serviceName = service.getAttString('ServiceName');
        this.clusterName = cluster.clusterName;
        this.connections = new aws_ec2_1.Connections({
            securityGroups,
            defaultPort: aws_ec2_1.Port.tcp(containerPort),
        });
    }
}
exports.EcsService = EcsService;
var SchedulingStrategy;
(function (SchedulingStrategy) {
    SchedulingStrategy["REPLICA"] = "REPLICA";
    SchedulingStrategy["DAEMON"] = "DAEMON";
})(SchedulingStrategy = exports.SchedulingStrategy || (exports.SchedulingStrategy = {}));
var PropagateTags;
(function (PropagateTags) {
    PropagateTags["TASK_DEFINITION"] = "TASK_DEFINITION";
    PropagateTags["SERVICE"] = "SERVICE";
})(PropagateTags = exports.PropagateTags || (exports.PropagateTags = {}));
//# sourceMappingURL=data:application/json;base64,