"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RollbackEvent = exports.EcsDeploymentGroup = void 0;
const path = require("path");
const aws_codedeploy_1 = require("@aws-cdk/aws-codedeploy");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const ecs_deployment_config_1 = require("./ecs-deployment-config");
class EcsDeploymentGroup extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        const { applicationName, deploymentGroupName, deploymentConfig, ecsServices, targetGroupNames, prodTrafficListener, testTrafficListener, terminationWaitTimeInMinutes = 60, autoRollbackOnEvents, } = props;
        if (terminationWaitTimeInMinutes > 2880) {
            throw new Error('Invalid TerminationWaitTimeInMinutes: The maximum setting is 2880 minutes (2 days).');
        }
        const codeDeployEcsRole = new aws_iam_1.Role(this, `${id}-ECSRole`, {
            assumedBy: new aws_iam_1.ServicePrincipal('codedeploy.amazonaws.com'),
            managedPolicies: [aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('AWSCodeDeployRoleForECS')],
        });
        this.application = new aws_codedeploy_1.EcsApplication(this, `${id}-ECSApp`, {
            applicationName,
        });
        const serviceToken = core_1.CustomResourceProvider.getOrCreate(this, `${id}-ECSToken`, {
            codeDirectory: path.join(__dirname, 'lambdas', 'ecs-deployment-group'),
            runtime: core_1.CustomResourceProviderRuntime.NODEJS_12_X,
            policyStatements: [
                {
                    Effect: aws_iam_1.Effect.ALLOW,
                    Action: ['codeDeploy:CreateDeploymentGroup', 'codeDeploy:UpdateDeploymentGroup', 'codeDeploy:DeleteDeploymentGroup'],
                    Resource: '*',
                },
                {
                    Effect: aws_iam_1.Effect.ALLOW,
                    Action: ['iam:PassRole'],
                    Resource: codeDeployEcsRole.roleArn,
                },
            ],
        });
        this.deploymentConfig = deploymentConfig || ecs_deployment_config_1.EcsDeploymentConfig.ALL_AT_ONCE;
        if (core_1.Construct.isConstruct(props.deploymentConfig)) {
            this.node.addDependency(props.deploymentConfig);
        }
        const ecsDeploymentGroup = new core_1.CustomResource(this, `${id}-ECSCR`, {
            serviceToken,
            resourceType: 'Custom::EcsDeploymentGroup',
            properties: {
                ApplicationName: this.application.applicationName,
                DeploymentGroupName: deploymentGroupName,
                ServiceRoleArn: codeDeployEcsRole.roleArn,
                TargetGroupNames: targetGroupNames,
                EcsServices: ecsServices.map((service) => ({
                    ClusterName: service.clusterName,
                    ServiceName: service.serviceName,
                })),
                ProdTrafficListenerArn: prodTrafficListener.listenerArn,
                TestTrafficListenerArn: testTrafficListener.listenerArn,
                TerminationWaitTimeInMinutes: terminationWaitTimeInMinutes,
                AutoRollbackOnEvents: autoRollbackOnEvents,
                DeploymentConfigName: this.deploymentConfig.deploymentConfigName,
            },
        });
        this.deploymentGroupName = ecsDeploymentGroup.ref;
        this.deploymentGroupArn = this.arnForDeploymentGroup(this.application.applicationName, this.deploymentGroupName);
    }
    arnForDeploymentGroup(applicationName, deploymentGroupName) {
        return `arn:${core_1.Aws.PARTITION}:codedeploy:${core_1.Aws.REGION}:${core_1.Aws.ACCOUNT_ID}:deploymentgroup:${applicationName}/${deploymentGroupName}`;
    }
}
exports.EcsDeploymentGroup = EcsDeploymentGroup;
var RollbackEvent;
(function (RollbackEvent) {
    RollbackEvent["DEPLOYMENT_FAILURE"] = "DEPLOYMENT_FAILURE";
    RollbackEvent["DEPLOYMENT_STOP_ON_ALARM"] = "DEPLOYMENT_STOP_ON_ALARM";
    RollbackEvent["DEPLOYMENT_STOP_ON_REQUEST"] = "DEPLOYMENT_STOP_ON_REQUEST";
})(RollbackEvent = exports.RollbackEvent || (exports.RollbackEvent = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNzLWRlcGxveW1lbnQtZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZWNzLWRlcGxveW1lbnQtZ3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQTZCO0FBQzdCLDREQUEwRTtBQUMxRSw4Q0FBaUY7QUFDakYsd0NBQTJJO0FBRTNJLG1FQUFvRjtBQW9FcEYsTUFBYSxrQkFBbUIsU0FBUSxlQUFRO0lBTTlDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBOEI7UUFDdEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLEVBQ0osZUFBZSxFQUNmLG1CQUFtQixFQUNuQixnQkFBZ0IsRUFDaEIsV0FBVyxFQUNYLGdCQUFnQixFQUNoQixtQkFBbUIsRUFDbkIsbUJBQW1CLEVBQ25CLDRCQUE0QixHQUFHLEVBQUUsRUFDakMsb0JBQW9CLEdBQ3JCLEdBQUcsS0FBSyxDQUFDO1FBRVYsSUFBSSw0QkFBNEIsR0FBRyxJQUFJLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxxRkFBcUYsQ0FBQyxDQUFDO1NBQ3hHO1FBRUQsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGNBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRTtZQUN4RCxTQUFTLEVBQUUsSUFBSSwwQkFBZ0IsQ0FBQywwQkFBMEIsQ0FBQztZQUMzRCxlQUFlLEVBQUUsQ0FBQyx1QkFBYSxDQUFDLHdCQUF3QixDQUFDLHlCQUF5QixDQUFDLENBQUM7U0FDckYsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLCtCQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUU7WUFDMUQsZUFBZTtTQUNoQixDQUFDLENBQUM7UUFFSCxNQUFNLFlBQVksR0FBRyw2QkFBc0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUU7WUFDOUUsYUFBYSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQztZQUN0RSxPQUFPLEVBQUUsb0NBQTZCLENBQUMsV0FBVztZQUNsRCxnQkFBZ0IsRUFBRTtnQkFDaEI7b0JBQ0UsTUFBTSxFQUFFLGdCQUFNLENBQUMsS0FBSztvQkFDcEIsTUFBTSxFQUFFLENBQUMsa0NBQWtDLEVBQUUsa0NBQWtDLEVBQUUsa0NBQWtDLENBQUM7b0JBQ3BILFFBQVEsRUFBRSxHQUFHO2lCQUNkO2dCQUNEO29CQUNFLE1BQU0sRUFBRSxnQkFBTSxDQUFDLEtBQUs7b0JBQ3BCLE1BQU0sRUFBRSxDQUFDLGNBQWMsQ0FBQztvQkFDeEIsUUFBUSxFQUFFLGlCQUFpQixDQUFDLE9BQU87aUJBQ3BDO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLElBQUksMkNBQW1CLENBQUMsV0FBVyxDQUFDO1FBRTVFLElBQUksZ0JBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFDakQsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDakQ7UUFFRCxNQUFNLGtCQUFrQixHQUFHLElBQUkscUJBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRTtZQUNqRSxZQUFZO1lBQ1osWUFBWSxFQUFFLDRCQUE0QjtZQUMxQyxVQUFVLEVBQUU7Z0JBQ1YsZUFBZSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZTtnQkFDakQsbUJBQW1CLEVBQUUsbUJBQW1CO2dCQUN4QyxjQUFjLEVBQUUsaUJBQWlCLENBQUMsT0FBTztnQkFDekMsZ0JBQWdCLEVBQUUsZ0JBQWdCO2dCQUNsQyxXQUFXLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFDekMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO29CQUNoQyxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7aUJBQ2pDLENBQUMsQ0FBQztnQkFDSCxzQkFBc0IsRUFBRSxtQkFBbUIsQ0FBQyxXQUFXO2dCQUN2RCxzQkFBc0IsRUFBRSxtQkFBbUIsQ0FBQyxXQUFXO2dCQUN2RCw0QkFBNEIsRUFBRSw0QkFBNEI7Z0JBQzFELG9CQUFvQixFQUFFLG9CQUFvQjtnQkFDMUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQjthQUNqRTtTQUNGLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUM7UUFDbEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNuSCxDQUFDO0lBRU8scUJBQXFCLENBQUMsZUFBdUIsRUFBRSxtQkFBMkI7UUFDaEYsT0FBTyxPQUFPLFVBQUcsQ0FBQyxTQUFTLGVBQWUsVUFBRyxDQUFDLE1BQU0sSUFBSSxVQUFHLENBQUMsVUFBVSxvQkFBb0IsZUFBZSxJQUFJLG1CQUFtQixFQUFFLENBQUM7SUFDckksQ0FBQztDQUNGO0FBcEZELGdEQW9GQztBQUVELElBQVksYUFJWDtBQUpELFdBQVksYUFBYTtJQUN2QiwwREFBeUMsQ0FBQTtJQUN6QyxzRUFBcUQsQ0FBQTtJQUNyRCwwRUFBeUQsQ0FBQTtBQUMzRCxDQUFDLEVBSlcsYUFBYSxHQUFiLHFCQUFhLEtBQWIscUJBQWEsUUFJeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgeyBFY3NBcHBsaWNhdGlvbiwgSUVjc0FwcGxpY2F0aW9uIH0gZnJvbSAnQGF3cy1jZGsvYXdzLWNvZGVkZXBsb3knO1xyXG5pbXBvcnQgeyBSb2xlLCBTZXJ2aWNlUHJpbmNpcGFsLCBNYW5hZ2VkUG9saWN5LCBFZmZlY3QgfSBmcm9tICdAYXdzLWNkay9hd3MtaWFtJztcclxuaW1wb3J0IHsgQXdzLCBDb25zdHJ1Y3QsIFJlc291cmNlLCBJUmVzb3VyY2UsIEN1c3RvbVJlc291cmNlLCBDdXN0b21SZXNvdXJjZVByb3ZpZGVyLCBDdXN0b21SZXNvdXJjZVByb3ZpZGVyUnVudGltZSB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgRWNzRGVwbG95bWVudENvbmZpZywgSUVjc0RlcGxveW1lbnRDb25maWcgfSBmcm9tICcuL2Vjcy1kZXBsb3ltZW50LWNvbmZpZyc7XHJcbmltcG9ydCB7IElFY3NTZXJ2aWNlIH0gZnJvbSAnLi9lY3Mtc2VydmljZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRyYWZmaWNMaXN0ZW5lciB7XHJcbiAgLyoqXHJcbiAgICogQVJOIG9mIHRoZSBsaXN0ZW5lclxyXG4gICAqIEBhdHRyaWJ1dGVcclxuICAgKi9cclxuICByZWFkb25seSBsaXN0ZW5lckFybjogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIGZvciBhbiBFQ1MgZGVwbG95bWVudCBncm91cC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUVjc0RlcGxveW1lbnRHcm91cCBleHRlbmRzIElSZXNvdXJjZSB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHJlZmVyZW5jZSB0byB0aGUgQ29kZURlcGxveSBFQ1MgQXBwbGljYXRpb24gdGhhdCB0aGlzIERlcGxveW1lbnQgR3JvdXAgYmVsb25ncyB0by5cclxuICAgKi9cclxuICByZWFkb25seSBhcHBsaWNhdGlvbjogSUVjc0FwcGxpY2F0aW9uO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgcGh5c2ljYWwgbmFtZSBvZiB0aGUgQ29kZURlcGxveSBEZXBsb3ltZW50IEdyb3VwLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGRlcGxveW1lbnRHcm91cE5hbWU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIEFSTiBvZiB0aGlzIERlcGxveW1lbnQgR3JvdXAuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgZGVwbG95bWVudEdyb3VwQXJuOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBEZXBsb3ltZW50IENvbmZpZ3VyYXRpb24gdGhpcyBHcm91cCB1c2VzLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGRlcGxveW1lbnRDb25maWc6IElFY3NEZXBsb3ltZW50Q29uZmlnO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEVjc0RlcGxveW1lbnRHcm91cFByb3BzIHtcclxuICByZWFkb25seSBhcHBsaWNhdGlvbk5hbWU/OiBzdHJpbmc7XHJcblxyXG4gIHJlYWRvbmx5IGRlcGxveW1lbnRHcm91cE5hbWU6IHN0cmluZztcclxuXHJcbiAgcmVhZG9ubHkgZGVwbG95bWVudENvbmZpZz86IElFY3NEZXBsb3ltZW50Q29uZmlnO1xyXG5cclxuICByZWFkb25seSBlY3NTZXJ2aWNlczogSUVjc1NlcnZpY2VbXTtcclxuXHJcbiAgcmVhZG9ubHkgdGFyZ2V0R3JvdXBOYW1lczogc3RyaW5nW107XHJcblxyXG4gIHJlYWRvbmx5IHByb2RUcmFmZmljTGlzdGVuZXI6IFRyYWZmaWNMaXN0ZW5lcjtcclxuXHJcbiAgcmVhZG9ubHkgdGVzdFRyYWZmaWNMaXN0ZW5lcjogVHJhZmZpY0xpc3RlbmVyO1xyXG5cclxuICAvKipcclxuICAgKiB0aGUgbnVtYmVyIG9mIG1pbnV0ZXMgYmVmb3JlIGRlbGV0aW5nIHRoZSBvcmlnaW5hbCAoYmx1ZSkgdGFzayBzZXQuXHJcbiAgICogRHVyaW5nIGFuIEFtYXpvbiBFQ1MgZGVwbG95bWVudCwgQ29kZURlcGxveSBzaGlmdHMgdHJhZmZpYyBmcm9tIHRoZVxyXG4gICAqIG9yaWdpbmFsIChibHVlKSB0YXNrIHNldCB0byBhIHJlcGxhY2VtZW50IChncmVlbikgdGFzayBzZXQuXHJcbiAgICpcclxuICAgKiBUaGUgbWF4aW11bSBzZXR0aW5nIGlzIDI4ODAgbWludXRlcyAoMiBkYXlzKS5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IDYwXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgdGVybWluYXRpb25XYWl0VGltZUluTWludXRlcz86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGV2ZW50IHR5cGUgb3IgdHlwZXMgdGhhdCB0cmlnZ2VyIGEgcm9sbGJhY2suXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgYXV0b1JvbGxiYWNrT25FdmVudHM/OiBSb2xsYmFja0V2ZW50W107XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFY3NEZXBsb3ltZW50R3JvdXAgZXh0ZW5kcyBSZXNvdXJjZSBpbXBsZW1lbnRzIElFY3NEZXBsb3ltZW50R3JvdXAge1xyXG4gIHB1YmxpYyByZWFkb25seSBhcHBsaWNhdGlvbjogSUVjc0FwcGxpY2F0aW9uO1xyXG4gIHB1YmxpYyByZWFkb25seSBkZXBsb3ltZW50R3JvdXBOYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGRlcGxveW1lbnRHcm91cEFybjogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBkZXBsb3ltZW50Q29uZmlnOiBJRWNzRGVwbG95bWVudENvbmZpZztcclxuXHJcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEVjc0RlcGxveW1lbnRHcm91cFByb3BzKSB7XHJcbiAgICBzdXBlcihzY29wZSwgaWQpO1xyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgYXBwbGljYXRpb25OYW1lLFxyXG4gICAgICBkZXBsb3ltZW50R3JvdXBOYW1lLFxyXG4gICAgICBkZXBsb3ltZW50Q29uZmlnLFxyXG4gICAgICBlY3NTZXJ2aWNlcyxcclxuICAgICAgdGFyZ2V0R3JvdXBOYW1lcyxcclxuICAgICAgcHJvZFRyYWZmaWNMaXN0ZW5lcixcclxuICAgICAgdGVzdFRyYWZmaWNMaXN0ZW5lcixcclxuICAgICAgdGVybWluYXRpb25XYWl0VGltZUluTWludXRlcyA9IDYwLFxyXG4gICAgICBhdXRvUm9sbGJhY2tPbkV2ZW50cyxcclxuICAgIH0gPSBwcm9wcztcclxuXHJcbiAgICBpZiAodGVybWluYXRpb25XYWl0VGltZUluTWludXRlcyA+IDI4ODApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFRlcm1pbmF0aW9uV2FpdFRpbWVJbk1pbnV0ZXM6IFRoZSBtYXhpbXVtIHNldHRpbmcgaXMgMjg4MCBtaW51dGVzICgyIGRheXMpLicpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNvZGVEZXBsb3lFY3NSb2xlID0gbmV3IFJvbGUodGhpcywgYCR7aWR9LUVDU1JvbGVgLCB7XHJcbiAgICAgIGFzc3VtZWRCeTogbmV3IFNlcnZpY2VQcmluY2lwYWwoJ2NvZGVkZXBsb3kuYW1hem9uYXdzLmNvbScpLFxyXG4gICAgICBtYW5hZ2VkUG9saWNpZXM6IFtNYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZSgnQVdTQ29kZURlcGxveVJvbGVGb3JFQ1MnKV0sXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmFwcGxpY2F0aW9uID0gbmV3IEVjc0FwcGxpY2F0aW9uKHRoaXMsIGAke2lkfS1FQ1NBcHBgLCB7XHJcbiAgICAgIGFwcGxpY2F0aW9uTmFtZSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHNlcnZpY2VUb2tlbiA9IEN1c3RvbVJlc291cmNlUHJvdmlkZXIuZ2V0T3JDcmVhdGUodGhpcywgYCR7aWR9LUVDU1Rva2VuYCwge1xyXG4gICAgICBjb2RlRGlyZWN0b3J5OiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnbGFtYmRhcycsICdlY3MtZGVwbG95bWVudC1ncm91cCcpLFxyXG4gICAgICBydW50aW1lOiBDdXN0b21SZXNvdXJjZVByb3ZpZGVyUnVudGltZS5OT0RFSlNfMTJfWCxcclxuICAgICAgcG9saWN5U3RhdGVtZW50czogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIEVmZmVjdDogRWZmZWN0LkFMTE9XLFxyXG4gICAgICAgICAgQWN0aW9uOiBbJ2NvZGVEZXBsb3k6Q3JlYXRlRGVwbG95bWVudEdyb3VwJywgJ2NvZGVEZXBsb3k6VXBkYXRlRGVwbG95bWVudEdyb3VwJywgJ2NvZGVEZXBsb3k6RGVsZXRlRGVwbG95bWVudEdyb3VwJ10sXHJcbiAgICAgICAgICBSZXNvdXJjZTogJyonLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgRWZmZWN0OiBFZmZlY3QuQUxMT1csXHJcbiAgICAgICAgICBBY3Rpb246IFsnaWFtOlBhc3NSb2xlJ10sXHJcbiAgICAgICAgICBSZXNvdXJjZTogY29kZURlcGxveUVjc1JvbGUucm9sZUFybixcclxuICAgICAgICB9LFxyXG4gICAgICBdLFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5kZXBsb3ltZW50Q29uZmlnID0gZGVwbG95bWVudENvbmZpZyB8fCBFY3NEZXBsb3ltZW50Q29uZmlnLkFMTF9BVF9PTkNFO1xyXG5cclxuICAgIGlmIChDb25zdHJ1Y3QuaXNDb25zdHJ1Y3QocHJvcHMuZGVwbG95bWVudENvbmZpZykpIHtcclxuICAgICAgdGhpcy5ub2RlLmFkZERlcGVuZGVuY3kocHJvcHMuZGVwbG95bWVudENvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZWNzRGVwbG95bWVudEdyb3VwID0gbmV3IEN1c3RvbVJlc291cmNlKHRoaXMsIGAke2lkfS1FQ1NDUmAsIHtcclxuICAgICAgc2VydmljZVRva2VuLFxyXG4gICAgICByZXNvdXJjZVR5cGU6ICdDdXN0b206OkVjc0RlcGxveW1lbnRHcm91cCcsXHJcbiAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBBcHBsaWNhdGlvbk5hbWU6IHRoaXMuYXBwbGljYXRpb24uYXBwbGljYXRpb25OYW1lLFxyXG4gICAgICAgIERlcGxveW1lbnRHcm91cE5hbWU6IGRlcGxveW1lbnRHcm91cE5hbWUsXHJcbiAgICAgICAgU2VydmljZVJvbGVBcm46IGNvZGVEZXBsb3lFY3NSb2xlLnJvbGVBcm4sXHJcbiAgICAgICAgVGFyZ2V0R3JvdXBOYW1lczogdGFyZ2V0R3JvdXBOYW1lcyxcclxuICAgICAgICBFY3NTZXJ2aWNlczogZWNzU2VydmljZXMubWFwKChzZXJ2aWNlKSA9PiAoe1xyXG4gICAgICAgICAgQ2x1c3Rlck5hbWU6IHNlcnZpY2UuY2x1c3Rlck5hbWUsXHJcbiAgICAgICAgICBTZXJ2aWNlTmFtZTogc2VydmljZS5zZXJ2aWNlTmFtZSxcclxuICAgICAgICB9KSksXHJcbiAgICAgICAgUHJvZFRyYWZmaWNMaXN0ZW5lckFybjogcHJvZFRyYWZmaWNMaXN0ZW5lci5saXN0ZW5lckFybixcclxuICAgICAgICBUZXN0VHJhZmZpY0xpc3RlbmVyQXJuOiB0ZXN0VHJhZmZpY0xpc3RlbmVyLmxpc3RlbmVyQXJuLFxyXG4gICAgICAgIFRlcm1pbmF0aW9uV2FpdFRpbWVJbk1pbnV0ZXM6IHRlcm1pbmF0aW9uV2FpdFRpbWVJbk1pbnV0ZXMsXHJcbiAgICAgICAgQXV0b1JvbGxiYWNrT25FdmVudHM6IGF1dG9Sb2xsYmFja09uRXZlbnRzLFxyXG4gICAgICAgIERlcGxveW1lbnRDb25maWdOYW1lOiB0aGlzLmRlcGxveW1lbnRDb25maWcuZGVwbG95bWVudENvbmZpZ05hbWUsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmRlcGxveW1lbnRHcm91cE5hbWUgPSBlY3NEZXBsb3ltZW50R3JvdXAucmVmO1xyXG4gICAgdGhpcy5kZXBsb3ltZW50R3JvdXBBcm4gPSB0aGlzLmFybkZvckRlcGxveW1lbnRHcm91cCh0aGlzLmFwcGxpY2F0aW9uLmFwcGxpY2F0aW9uTmFtZSwgdGhpcy5kZXBsb3ltZW50R3JvdXBOYW1lKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXJuRm9yRGVwbG95bWVudEdyb3VwKGFwcGxpY2F0aW9uTmFtZTogc3RyaW5nLCBkZXBsb3ltZW50R3JvdXBOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGBhcm46JHtBd3MuUEFSVElUSU9OfTpjb2RlZGVwbG95OiR7QXdzLlJFR0lPTn06JHtBd3MuQUNDT1VOVF9JRH06ZGVwbG95bWVudGdyb3VwOiR7YXBwbGljYXRpb25OYW1lfS8ke2RlcGxveW1lbnRHcm91cE5hbWV9YDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFJvbGxiYWNrRXZlbnQge1xyXG4gIERFUExPWU1FTlRfRkFJTFVSRSA9ICdERVBMT1lNRU5UX0ZBSUxVUkUnLFxyXG4gIERFUExPWU1FTlRfU1RPUF9PTl9BTEFSTSA9ICdERVBMT1lNRU5UX1NUT1BfT05fQUxBUk0nLFxyXG4gIERFUExPWU1FTlRfU1RPUF9PTl9SRVFVRVNUID0gJ0RFUExPWU1FTlRfU1RPUF9PTl9SRVFVRVNUJyxcclxufVxyXG4iXX0=