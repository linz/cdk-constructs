"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RollbackEvent = exports.EcsDeploymentGroup = void 0;
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_codedeploy_1 = require("aws-cdk-lib/aws-codedeploy");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const constructs_1 = require("constructs");
const ecs_deployment_config_1 = require("./ecs-deployment-config");
class EcsDeploymentGroup extends aws_cdk_lib_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this.tags = new aws_cdk_lib_1.TagManager(aws_cdk_lib_1.TagType.KEY_VALUE, 'TagManager');
        const { application, deploymentGroupName, deploymentConfig, ecsServices, targetGroups, prodTrafficListener, testTrafficListener, terminationWaitTime = aws_cdk_lib_1.Duration.minutes(60), autoRollbackOnEvents, } = props;
        if (terminationWaitTime.toMinutes() > 2880) {
            throw new Error('Invalid TerminationWaitTimeInMinutes: The maximum setting is 2880 minutes (2 days).');
        }
        const codeDeployEcsRole = new aws_iam_1.Role(this, `${id}-ECSRole`, {
            assumedBy: new aws_iam_1.ServicePrincipal('codedeploy.amazonaws.com'),
            managedPolicies: [aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('AWSCodeDeployRoleForECS')],
        });
        if (application) {
            this.application = application;
        }
        else {
            this.application = new aws_codedeploy_1.EcsApplication(this, 'EcsApplication', {
                applicationName: props.applicationName, // support deprecated applicationName prop
            });
        }
        const serviceToken = new aws_lambda_1.Function(this, `${id}-Token`, {
            runtime: aws_lambda_1.Runtime.NODEJS_14_X,
            code: aws_lambda_1.Code.fromAsset(path.join(__dirname, 'lambdas', 'ecs-deployment-group')),
            handler: 'index.handler',
            timeout: aws_cdk_lib_1.Duration.minutes(15),
        });
        serviceToken.addToRolePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: [
                'codeDeploy:CreateDeploymentGroup',
                'codeDeploy:UpdateDeploymentGroup',
                'codeDeploy:DeleteDeploymentGroup',
                'codeDeploy:TagResource',
                'codeDeploy:UntagResource',
            ],
            resources: ['*'],
        }));
        serviceToken.addToRolePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ['iam:PassRole'],
            resources: [codeDeployEcsRole.roleArn],
        }));
        this.deploymentConfig = deploymentConfig || ecs_deployment_config_1.EcsDeploymentConfig.ALL_AT_ONCE;
        if (constructs_1.Construct.isConstruct(props.deploymentConfig)) {
            this.node.addDependency(props.deploymentConfig);
        }
        this.node.addDependency(...ecsServices);
        const ecsDeploymentGroup = new aws_cdk_lib_1.CustomResource(this, `${id}-ECSCR`, {
            serviceToken: serviceToken.functionArn,
            resourceType: 'Custom::EcsDeploymentGroup',
            properties: {
                ApplicationName: this.application.applicationName,
                DeploymentGroupName: deploymentGroupName,
                ServiceRoleArn: codeDeployEcsRole.roleArn,
                TargetGroupNames: targetGroups.map((tg) => tg.targetGroupName),
                EcsServices: ecsServices.map((service) => ({
                    ClusterName: service.clusterName,
                    ServiceName: service.serviceName,
                })),
                ProdTrafficListenerArn: prodTrafficListener.listenerArn,
                TestTrafficListenerArn: testTrafficListener.listenerArn,
                TerminationWaitTimeInMinutes: terminationWaitTime.toMinutes(),
                AutoRollbackOnEvents: autoRollbackOnEvents,
                DeploymentConfigName: this.deploymentConfig.deploymentConfigName,
                Tags: aws_cdk_lib_1.Lazy.any({ produce: () => this.tags.renderTags() }),
            },
        });
        this.deploymentGroupName = ecsDeploymentGroup.ref;
        this.deploymentGroupArn = ecsDeploymentGroup.getAttString('Arn');
    }
}
exports.EcsDeploymentGroup = EcsDeploymentGroup;
var RollbackEvent;
(function (RollbackEvent) {
    RollbackEvent["DEPLOYMENT_FAILURE"] = "DEPLOYMENT_FAILURE";
    RollbackEvent["DEPLOYMENT_STOP_ON_ALARM"] = "DEPLOYMENT_STOP_ON_ALARM";
    RollbackEvent["DEPLOYMENT_STOP_ON_REQUEST"] = "DEPLOYMENT_STOP_ON_REQUEST";
})(RollbackEvent = exports.RollbackEvent || (exports.RollbackEvent = {}));
//# sourceMappingURL=data:application/json;base64,