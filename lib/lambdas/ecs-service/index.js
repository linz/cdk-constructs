"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const ecs = new aws_sdk_1.ECS();
const getProperties = (props) => ({
    cluster: props.Cluster,
    serviceName: props.ServiceName,
    containerName: props.ContainerName,
    taskDefinition: props.TaskDefinition,
    launchType: props.LaunchType,
    platformVersion: props.PlatformVersion,
    desiredCount: props.DesiredCount,
    subnets: props.Subnets,
    securityGroups: props.SecurityGroups,
    targetGroupArn: props.TargetGroupArn,
    containerPort: props.ContainerPort,
    schedulingStrategy: props.SchedulingStrategy,
    healthCheckGracePeriodSeconds: props.HealthCheckGracePeriod,
    deploymentConfiguration: props.DeploymentConfiguration,
});
const onCreate = async (event) => {
    const { cluster, serviceName, containerName, taskDefinition, launchType, platformVersion, desiredCount, subnets, securityGroups, targetGroupArn, containerPort, schedulingStrategy, healthCheckGracePeriodSeconds, deploymentConfiguration, } = getProperties(event.ResourceProperties);
    const { service } = await ecs
        .createService({
        cluster,
        serviceName,
        taskDefinition,
        launchType,
        platformVersion,
        desiredCount,
        schedulingStrategy,
        deploymentController: {
            type: 'CODE_DEPLOY',
        },
        networkConfiguration: {
            awsvpcConfiguration: {
                subnets,
                securityGroups,
            },
        },
        deploymentConfiguration,
        healthCheckGracePeriodSeconds,
        loadBalancers: [
            {
                targetGroupArn: targetGroupArn,
                containerPort,
                containerName,
            },
        ],
    })
        .promise();
    if (!service)
        throw Error('Service could not be created');
    return {
        PhysicalResourceId: service.serviceArn,
        Data: {
            ServiceName: service.serviceName,
        },
    };
};
/**
 * For services using the blue/green (CODE_DEPLOY) deployment controller,
 * only the desired count, deployment configuration, task placement constraints
 * and strategies, and health check grace period can be updated using this API.
 * If the network configuration, platform version, or task definition need to be
 * updated, a new AWS CodeDeploy deployment should be created.
 * For more information, see CreateDeployment in the AWS CodeDeploy API Reference.
 */
const onUpdate = async (event) => {
    const { cluster, serviceName, desiredCount, deploymentConfiguration, healthCheckGracePeriodSeconds } = getProperties(event.ResourceProperties);
    const { service } = await ecs
        .updateService({
        service: serviceName,
        cluster,
        desiredCount,
        deploymentConfiguration,
        healthCheckGracePeriodSeconds,
    })
        .promise();
    if (!service)
        throw Error('Service could not be updated');
    return {
        PhysicalResourceId: service.serviceArn,
        Data: {
            ServiceName: service.serviceName,
        },
    };
};
const onDelete = async (event) => {
    const { cluster, serviceName } = getProperties(event.ResourceProperties);
    await ecs
        .deleteService({
        service: serviceName,
        cluster,
        force: true,
    })
        .promise();
    await ecs
        .waitFor('servicesInactive', {
        cluster,
        services: [serviceName],
    })
        .promise();
};
exports.handler = async (event) => {
    const requestType = event.RequestType;
    switch (requestType) {
        case 'Create':
            return onCreate(event);
        case 'Update':
            return onUpdate(event);
        case 'Delete':
            return onDelete(event);
        default:
            throw new Error(`Invalid request type: ${requestType}`);
    }
};
//# sourceMappingURL=data:application/json;base64,