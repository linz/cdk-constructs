"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
var RollbackEvent;
(function (RollbackEvent) {
    RollbackEvent["DEPLOYMENT_FAILURE"] = "DEPLOYMENT_FAILURE";
    RollbackEvent["DEPLOYMENT_STOP_ON_ALARM"] = "DEPLOYMENT_STOP_ON_ALARM";
    RollbackEvent["DEPLOYMENT_STOP_ON_REQUEST"] = "DEPLOYMENT_STOP_ON_REQUEST";
})(RollbackEvent || (RollbackEvent = {}));
const codeDeploy = new aws_sdk_1.CodeDeploy();
const getProperties = (props) => ({
    applicationName: props.ApplicationName,
    deploymentGroupName: props.DeploymentGroupName,
    serviceRoleArn: props.ServiceRoleArn,
    ecsServices: props.EcsServices.map(({ ClusterName, ServiceName }) => ({
        clusterName: ClusterName,
        serviceName: ServiceName,
    })),
    targetGroupNames: props.TargetGroupNames,
    prodTrafficListenerArn: props.ProdTrafficListenerArn,
    testTrafficListenerArn: props.TestTrafficListenerArn,
    terminationWaitTimeInMinutes: props.TerminationWaitTimeInMinutes,
    autoRollbackOnEvents: props.AutoRollbackOnEvents,
    deploymentConfigName: props.DeploymentConfigName,
});
const onCreate = async (event) => {
    const { applicationName, deploymentGroupName, serviceRoleArn, ecsServices, targetGroupNames, prodTrafficListenerArn, testTrafficListenerArn, terminationWaitTimeInMinutes, autoRollbackOnEvents, deploymentConfigName, } = getProperties(event.ResourceProperties);
    await codeDeploy
        .createDeploymentGroup({
        applicationName,
        deploymentGroupName,
        serviceRoleArn,
        ecsServices,
        loadBalancerInfo: {
            targetGroupPairInfoList: [
                {
                    prodTrafficRoute: {
                        listenerArns: [prodTrafficListenerArn],
                    },
                    testTrafficRoute: {
                        listenerArns: [testTrafficListenerArn],
                    },
                    targetGroups: targetGroupNames.map((name) => ({
                        name,
                    })),
                },
            ],
        },
        autoRollbackConfiguration: {
            enabled: !!autoRollbackOnEvents,
            events: autoRollbackOnEvents,
        },
        blueGreenDeploymentConfiguration: {
            terminateBlueInstancesOnDeploymentSuccess: {
                action: 'TERMINATE',
                terminationWaitTimeInMinutes,
            },
            deploymentReadyOption: {
                actionOnTimeout: 'CONTINUE_DEPLOYMENT',
            },
        },
        deploymentStyle: {
            deploymentType: 'BLUE_GREEN',
            deploymentOption: 'WITH_TRAFFIC_CONTROL',
        },
        deploymentConfigName: deploymentConfigName !== null && deploymentConfigName !== void 0 ? deploymentConfigName : 'CodeDeployDefault.ECSAllAtOnce',
    })
        .promise();
    return {
        PhysicalResourceId: deploymentGroupName,
    };
};
const onUpdate = async (event) => {
    const newProps = getProperties(event.ResourceProperties);
    const oldProps = getProperties(event.OldResourceProperties);
    await codeDeploy
        .updateDeploymentGroup({
        applicationName: oldProps.applicationName,
        currentDeploymentGroupName: oldProps.deploymentGroupName,
        newDeploymentGroupName: newProps.deploymentGroupName,
        ecsServices: newProps.ecsServices,
        loadBalancerInfo: {
            targetGroupPairInfoList: [
                {
                    prodTrafficRoute: {
                        listenerArns: [newProps.prodTrafficListenerArn],
                    },
                    testTrafficRoute: {
                        listenerArns: [newProps.testTrafficListenerArn],
                    },
                    targetGroups: newProps.targetGroupNames.map((name) => ({
                        name,
                    })),
                },
            ],
        },
        autoRollbackConfiguration: {
            enabled: !!newProps.autoRollbackOnEvents,
            events: newProps.autoRollbackOnEvents,
        },
        blueGreenDeploymentConfiguration: {
            terminateBlueInstancesOnDeploymentSuccess: {
                action: 'TERMINATE',
                terminationWaitTimeInMinutes: newProps.terminationWaitTimeInMinutes,
            },
            deploymentReadyOption: {
                actionOnTimeout: 'CONTINUE_DEPLOYMENT',
            },
        },
        deploymentConfigName: newProps.deploymentConfigName,
    })
        .promise();
    return {
        PhysicalResourceId: newProps.deploymentGroupName,
    };
};
const onDelete = async (event) => {
    const { applicationName, deploymentGroupName } = getProperties(event.ResourceProperties);
    await codeDeploy
        .deleteDeploymentGroup({
        applicationName,
        deploymentGroupName,
    })
        .promise();
};
exports.handler = async (event) => {
    const requestType = event.RequestType;
    switch (requestType) {
        case 'Create':
            return onCreate(event);
        case 'Update':
            return onUpdate(event);
        case 'Delete':
            return onDelete(event);
        default:
            throw new Error(`Invalid request type: ${requestType}`);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGFtYmRhcy9lY3MtZGVwbG95bWVudC1ncm91cC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFNQSxxQ0FBcUM7QUFFckMsSUFBSyxhQUlKO0FBSkQsV0FBSyxhQUFhO0lBQ2hCLDBEQUF5QyxDQUFBO0lBQ3pDLHNFQUFxRCxDQUFBO0lBQ3JELDBFQUF5RCxDQUFBO0FBQzNELENBQUMsRUFKSSxhQUFhLEtBQWIsYUFBYSxRQUlqQjtBQW1CRCxNQUFNLFVBQVUsR0FBRyxJQUFJLG9CQUFVLEVBQUUsQ0FBQztBQUVwQyxNQUFNLGFBQWEsR0FBRyxDQUNwQixLQUFpSSxFQUN4RyxFQUFFLENBQUMsQ0FBQztJQUM3QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7SUFDdEMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtJQUM5QyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7SUFDcEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFnRCxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xILFdBQVcsRUFBRSxXQUFXO1FBQ3hCLFdBQVcsRUFBRSxXQUFXO0tBQ3pCLENBQUMsQ0FBQztJQUNILGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7SUFDeEMsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLHNCQUFzQjtJQUNwRCxzQkFBc0IsRUFBRSxLQUFLLENBQUMsc0JBQXNCO0lBQ3BELDRCQUE0QixFQUFFLEtBQUssQ0FBQyw0QkFBNEI7SUFDaEUsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtJQUNoRCxvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CO0NBQ2pELENBQUMsQ0FBQztBQUVILE1BQU0sUUFBUSxHQUFHLEtBQUssRUFBRSxLQUE4QyxFQUEwQixFQUFFO0lBQ2hHLE1B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ZUFBZSxFQUFFLHFCQUFxQjthQUN2QztTQUNGO1FBQ0Qsb0JBQW9CLEVBQUUsUUFBUSxDQUFDLG9CQUFvQjtLQUNwRCxDQUFDO1NBQ0QsT0FBTyxFQUFFLENBQUM7SUFFYixPQUFPO1FBQ0wsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLG1CQUFtQjtLQUNqRCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQUcsS0FBSyxFQUFFLEtBQThDLEVBQWlCLEVBQUU7SUFDdkYsTUFBTSxFQUFFLGVBQWUsRUFBRSxtQkFBbUIsRUFBRSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUV6RixNQUFNLFVBQVU7U0FDYixxQkFBcUIsQ0FBQztRQUNyQixlQUFlO1FBQ2YsbUJBQW1CO0tBQ3BCLENBQUM7U0FDRCxPQUFPLEVBQUUsQ0FBQztBQUNmLENBQUMsQ0FBQztBQUVXLFFBQUEsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUF3QyxFQUFpQyxFQUFFO0lBQ3ZHLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7SUFFdEMsUUFBUSxXQUFXLEVBQUU7UUFDbkIsS0FBSyxRQUFRO1lBQ1gsT0FBTyxRQUFRLENBQUMsS0FBZ0QsQ0FBQyxDQUFDO1FBQ3BFLEtBQUssUUFBUTtZQUNYLE9BQU8sUUFBUSxDQUFDLEtBQWdELENBQUMsQ0FBQztRQUNwRSxLQUFLLFFBQVE7WUFDWCxPQUFPLFFBQVEsQ0FBQyxLQUFnRCxDQUFDLENBQUM7UUFDcEU7WUFDRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixXQUFXLEVBQUUsQ0FBQyxDQUFDO0tBQzNEO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xyXG4gIENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VFdmVudCxcclxuICBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlQ3JlYXRlRXZlbnQsXHJcbiAgQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZVVwZGF0ZUV2ZW50LFxyXG4gIENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VEZWxldGVFdmVudCxcclxufSBmcm9tICdhd3MtbGFtYmRhJztcclxuaW1wb3J0IHsgQ29kZURlcGxveSB9IGZyb20gJ2F3cy1zZGsnO1xyXG5cclxuZW51bSBSb2xsYmFja0V2ZW50IHtcclxuICBERVBMT1lNRU5UX0ZBSUxVUkUgPSAnREVQTE9ZTUVOVF9GQUlMVVJFJyxcclxuICBERVBMT1lNRU5UX1NUT1BfT05fQUxBUk0gPSAnREVQTE9ZTUVOVF9TVE9QX09OX0FMQVJNJyxcclxuICBERVBMT1lNRU5UX1NUT1BfT05fUkVRVUVTVCA9ICdERVBMT1lNRU5UX1NUT1BfT05fUkVRVUVTVCcsXHJcbn1cclxuXHJcbmludGVyZmFjZSBIYW5kbGVyUmV0dXJuIHtcclxuICBQaHlzaWNhbFJlc291cmNlSWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFY3NEZXBsb3ltZW50R3JvdXBQcm9wcyB7XHJcbiAgYXBwbGljYXRpb25OYW1lOiBzdHJpbmc7XHJcbiAgZGVwbG95bWVudEdyb3VwTmFtZTogc3RyaW5nO1xyXG4gIHNlcnZpY2VSb2xlQXJuOiBzdHJpbmc7XHJcbiAgZWNzU2VydmljZXM6IENvZGVEZXBsb3kuRUNTU2VydmljZUxpc3Q7XHJcbiAgdGFyZ2V0R3JvdXBOYW1lczogc3RyaW5nW107XHJcbiAgcHJvZFRyYWZmaWNMaXN0ZW5lckFybjogc3RyaW5nO1xyXG4gIHRlc3RUcmFmZmljTGlzdGVuZXJBcm46IHN0cmluZztcclxuICB0ZXJtaW5hdGlvbldhaXRUaW1lSW5NaW51dGVzOiBudW1iZXI7XHJcbiAgYXV0b1JvbGxiYWNrT25FdmVudHM/OiBSb2xsYmFja0V2ZW50W107XHJcbiAgZGVwbG95bWVudENvbmZpZ05hbWU/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IGNvZGVEZXBsb3kgPSBuZXcgQ29kZURlcGxveSgpO1xyXG5cclxuY29uc3QgZ2V0UHJvcGVydGllcyA9IChcclxuICBwcm9wczogQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50WydSZXNvdXJjZVByb3BlcnRpZXMnXSB8IENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VVcGRhdGVFdmVudFsnT2xkUmVzb3VyY2VQcm9wZXJ0aWVzJ10sXHJcbik6IEVjc0RlcGxveW1lbnRHcm91cFByb3BzID0+ICh7XHJcbiAgYXBwbGljYXRpb25OYW1lOiBwcm9wcy5BcHBsaWNhdGlvbk5hbWUsXHJcbiAgZGVwbG95bWVudEdyb3VwTmFtZTogcHJvcHMuRGVwbG95bWVudEdyb3VwTmFtZSxcclxuICBzZXJ2aWNlUm9sZUFybjogcHJvcHMuU2VydmljZVJvbGVBcm4sXHJcbiAgZWNzU2VydmljZXM6IHByb3BzLkVjc1NlcnZpY2VzLm1hcCgoeyBDbHVzdGVyTmFtZSwgU2VydmljZU5hbWUgfTogeyBDbHVzdGVyTmFtZTogc3RyaW5nOyBTZXJ2aWNlTmFtZTogc3RyaW5nIH0pID0+ICh7XHJcbiAgICBjbHVzdGVyTmFtZTogQ2x1c3Rlck5hbWUsXHJcbiAgICBzZXJ2aWNlTmFtZTogU2VydmljZU5hbWUsXHJcbiAgfSkpLFxyXG4gIHRhcmdldEdyb3VwTmFtZXM6IHByb3BzLlRhcmdldEdyb3VwTmFtZXMsXHJcbiAgcHJvZFRyYWZmaWNMaXN0ZW5lckFybjogcHJvcHMuUHJvZFRyYWZmaWNMaXN0ZW5lckFybixcclxuICB0ZXN0VHJhZmZpY0xpc3RlbmVyQXJuOiBwcm9wcy5UZXN0VHJhZmZpY0xpc3RlbmVyQXJuLFxyXG4gIHRlcm1pbmF0aW9uV2FpdFRpbWVJbk1pbnV0ZXM6IHByb3BzLlRlcm1pbmF0aW9uV2FpdFRpbWVJbk1pbnV0ZXMsXHJcbiAgYXV0b1JvbGxiYWNrT25FdmVudHM6IHByb3BzLkF1dG9Sb2xsYmFja09uRXZlbnRzLFxyXG4gIGRlcGxveW1lbnRDb25maWdOYW1lOiBwcm9wcy5EZXBsb3ltZW50Q29uZmlnTmFtZSxcclxufSk7XHJcblxyXG5jb25zdCBvbkNyZWF0ZSA9IGFzeW5jIChldmVudDogQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUNyZWF0ZUV2ZW50KTogUHJvbWlzZTxIYW5kbGVyUmV0dXJuPiA9PiB7XHJcbiAgY29uc3Qge1xyXG4gICAgYXBwbGljYXRpb25OYW1lLFxyXG4gICAgZGVwbG95bWVudEdyb3VwTmFtZSxcclxuICAgIHNlcnZpY2VSb2xlQXJuLFxyXG4gICAgZWNzU2VydmljZXMsXHJcbiAgICB0YXJnZXRHcm91cE5hbWVzLFxyXG4gICAgcHJvZFRyYWZmaWNMaXN0ZW5lckFybixcclxuICAgIHRlc3RUcmFmZmljTGlzdGVuZXJBcm4sXHJcbiAgICB0ZXJtaW5hdGlvbldhaXRUaW1lSW5NaW51dGVzLFxyXG4gICAgYXV0b1JvbGxiYWNrT25FdmVudHMsXHJcbiAgICBkZXBsb3ltZW50Q29uZmlnTmFtZSxcclxuICB9ID0gZ2V0UHJvcGVydGllcyhldmVudC5SZXNvdXJjZVByb3BlcnRpZXMpO1xyXG5cclxuICBhd2FpdCBjb2RlRGVwbG95XHJcbiAgICAuY3JlYXRlRGVwbG95bWVudEdyb3VwKHtcclxuICAgICAgYXBwbGljYXRpb25OYW1lLFxyXG4gICAgICBkZXBsb3ltZW50R3JvdXBOYW1lLFxyXG4gICAgICBzZXJ2aWNlUm9sZUFybixcclxuICAgICAgZWNzU2VydmljZXMsXHJcbiAgICAgIGxvYWRCYWxhbmNlckluZm86IHtcclxuICAgICAgICB0YXJnZXRHcm91cFBhaXJJbmZvTGlzdDogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBwcm9kVHJhZmZpY1JvdXRlOiB7XHJcbiAgICAgICAgICAgICAgbGlzdGVuZXJBcm5zOiBbcHJvZFRyYWZmaWNMaXN0ZW5lckFybl0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRlc3RUcmFmZmljUm91dGU6IHtcclxuICAgICAgICAgICAgICBsaXN0ZW5lckFybnM6IFt0ZXN0VHJhZmZpY0xpc3RlbmVyQXJuXSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGFyZ2V0R3JvdXBzOiB0YXJnZXRHcm91cE5hbWVzLm1hcCgobmFtZSkgPT4gKHtcclxuICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICB9KSksXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH0sXHJcbiAgICAgIGF1dG9Sb2xsYmFja0NvbmZpZ3VyYXRpb246IHtcclxuICAgICAgICBlbmFibGVkOiAhIWF1dG9Sb2xsYmFja09uRXZlbnRzLFxyXG4gICAgICAgIGV2ZW50czogYXV0b1JvbGxiYWNrT25FdmVudHMsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJsdWVHcmVlbkRlcGxveW1lbnRDb25maWd1cmF0aW9uOiB7XHJcbiAgICAgICAgdGVybWluYXRlQmx1ZUluc3RhbmNlc09uRGVwbG95bWVudFN1Y2Nlc3M6IHtcclxuICAgICAgICAgIGFjdGlvbjogJ1RFUk1JTkFURScsXHJcbiAgICAgICAgICB0ZXJtaW5hdGlvbldhaXRUaW1lSW5NaW51dGVzLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVwbG95bWVudFJlYWR5T3B0aW9uOiB7XHJcbiAgICAgICAgICBhY3Rpb25PblRpbWVvdXQ6ICdDT05USU5VRV9ERVBMT1lNRU5UJyxcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgICBkZXBsb3ltZW50U3R5bGU6IHtcclxuICAgICAgICBkZXBsb3ltZW50VHlwZTogJ0JMVUVfR1JFRU4nLFxyXG4gICAgICAgIGRlcGxveW1lbnRPcHRpb246ICdXSVRIX1RSQUZGSUNfQ09OVFJPTCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIGRlcGxveW1lbnRDb25maWdOYW1lOiBkZXBsb3ltZW50Q29uZmlnTmFtZSA/PyAnQ29kZURlcGxveURlZmF1bHQuRUNTQWxsQXRPbmNlJyxcclxuICAgIH0pXHJcbiAgICAucHJvbWlzZSgpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgUGh5c2ljYWxSZXNvdXJjZUlkOiBkZXBsb3ltZW50R3JvdXBOYW1lLFxyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBvblVwZGF0ZSA9IGFzeW5jIChldmVudDogQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZVVwZGF0ZUV2ZW50KTogUHJvbWlzZTxIYW5kbGVyUmV0dXJuPiA9PiB7XHJcbiAgY29uc3QgbmV3UHJvcHMgPSBnZXRQcm9wZXJ0aWVzKGV2ZW50LlJlc291cmNlUHJvcGVydGllcyk7XHJcbiAgY29uc3Qgb2xkUHJvcHMgPSBnZXRQcm9wZXJ0aWVzKGV2ZW50Lk9sZFJlc291cmNlUHJvcGVydGllcyk7XHJcblxyXG4gIGF3YWl0IGNvZGVEZXBsb3lcclxuICAgIC51cGRhdGVEZXBsb3ltZW50R3JvdXAoe1xyXG4gICAgICBhcHBsaWNhdGlvbk5hbWU6IG9sZFByb3BzLmFwcGxpY2F0aW9uTmFtZSxcclxuICAgICAgY3VycmVudERlcGxveW1lbnRHcm91cE5hbWU6IG9sZFByb3BzLmRlcGxveW1lbnRHcm91cE5hbWUsXHJcbiAgICAgIG5ld0RlcGxveW1lbnRHcm91cE5hbWU6IG5ld1Byb3BzLmRlcGxveW1lbnRHcm91cE5hbWUsXHJcbiAgICAgIGVjc1NlcnZpY2VzOiBuZXdQcm9wcy5lY3NTZXJ2aWNlcyxcclxuICAgICAgbG9hZEJhbGFuY2VySW5mbzoge1xyXG4gICAgICAgIHRhcmdldEdyb3VwUGFpckluZm9MaXN0OiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHByb2RUcmFmZmljUm91dGU6IHtcclxuICAgICAgICAgICAgICBsaXN0ZW5lckFybnM6IFtuZXdQcm9wcy5wcm9kVHJhZmZpY0xpc3RlbmVyQXJuXSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGVzdFRyYWZmaWNSb3V0ZToge1xyXG4gICAgICAgICAgICAgIGxpc3RlbmVyQXJuczogW25ld1Byb3BzLnRlc3RUcmFmZmljTGlzdGVuZXJBcm5dLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0YXJnZXRHcm91cHM6IG5ld1Byb3BzLnRhcmdldEdyb3VwTmFtZXMubWFwKChuYW1lKSA9PiAoe1xyXG4gICAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgIH0pKSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgICAgfSxcclxuICAgICAgYXV0b1JvbGxiYWNrQ29uZmlndXJhdGlvbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6ICEhbmV3UHJvcHMuYXV0b1JvbGxiYWNrT25FdmVudHMsXHJcbiAgICAgICAgZXZlbnRzOiBuZXdQcm9wcy5hdXRvUm9sbGJhY2tPbkV2ZW50cyxcclxuICAgICAgfSxcclxuICAgICAgYmx1ZUdyZWVuRGVwbG95bWVudENvbmZpZ3VyYXRpb246IHtcclxuICAgICAgICB0ZXJtaW5hdGVCbHVlSW5zdGFuY2VzT25EZXBsb3ltZW50U3VjY2Vzczoge1xyXG4gICAgICAgICAgYWN0aW9uOiAnVEVSTUlOQVRFJyxcclxuICAgICAgICAgIHRlcm1pbmF0aW9uV2FpdFRpbWVJbk1pbnV0ZXM6IG5ld1Byb3BzLnRlcm1pbmF0aW9uV2FpdFRpbWVJbk1pbnV0ZXMsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZXBsb3ltZW50UmVhZHlPcHRpb246IHtcclxuICAgICAgICAgIGFjdGlvbk9uVGltZW91dDogJ0NPTlRJTlVFX0RFUExPWU1FTlQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIGRlcGxveW1lbnRDb25maWdOYW1lOiBuZXdQcm9wcy5kZXBsb3ltZW50Q29uZmlnTmFtZSxcclxuICAgIH0pXHJcbiAgICAucHJvbWlzZSgpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgUGh5c2ljYWxSZXNvdXJjZUlkOiBuZXdQcm9wcy5kZXBsb3ltZW50R3JvdXBOYW1lLFxyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBvbkRlbGV0ZSA9IGFzeW5jIChldmVudDogQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZURlbGV0ZUV2ZW50KTogUHJvbWlzZTx2b2lkPiA9PiB7XHJcbiAgY29uc3QgeyBhcHBsaWNhdGlvbk5hbWUsIGRlcGxveW1lbnRHcm91cE5hbWUgfSA9IGdldFByb3BlcnRpZXMoZXZlbnQuUmVzb3VyY2VQcm9wZXJ0aWVzKTtcclxuXHJcbiAgYXdhaXQgY29kZURlcGxveVxyXG4gICAgLmRlbGV0ZURlcGxveW1lbnRHcm91cCh7XHJcbiAgICAgIGFwcGxpY2F0aW9uTmFtZSxcclxuICAgICAgZGVwbG95bWVudEdyb3VwTmFtZSxcclxuICAgIH0pXHJcbiAgICAucHJvbWlzZSgpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VFdmVudCk6IFByb21pc2U8SGFuZGxlclJldHVybiB8IHZvaWQ+ID0+IHtcclxuICBjb25zdCByZXF1ZXN0VHlwZSA9IGV2ZW50LlJlcXVlc3RUeXBlO1xyXG5cclxuICBzd2l0Y2ggKHJlcXVlc3RUeXBlKSB7XHJcbiAgICBjYXNlICdDcmVhdGUnOlxyXG4gICAgICByZXR1cm4gb25DcmVhdGUoZXZlbnQgYXMgQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUNyZWF0ZUV2ZW50KTtcclxuICAgIGNhc2UgJ1VwZGF0ZSc6XHJcbiAgICAgIHJldHVybiBvblVwZGF0ZShldmVudCBhcyBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlVXBkYXRlRXZlbnQpO1xyXG4gICAgY2FzZSAnRGVsZXRlJzpcclxuICAgICAgcmV0dXJuIG9uRGVsZXRlKGV2ZW50IGFzIENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VEZWxldGVFdmVudCk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcmVxdWVzdCB0eXBlOiAke3JlcXVlc3RUeXBlfWApO1xyXG4gIH1cclxufTtcclxuIl19